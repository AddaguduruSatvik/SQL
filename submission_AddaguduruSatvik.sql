/*

-----------------------------------------------------------------------------------------------------------------------------------
                                               Guidelines
-----------------------------------------------------------------------------------------------------------------------------------

The provided document is a guide for the project. Follow the instructions and take the necessary steps to finish
the project in the SQL file			

-----------------------------------------------------------------------------------------------------------------------------------

                                                         Queries
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/

-- 1. WRITE A QUERY TO DISPLAY CUSTOMER FULL NAME WITH THEIR TITLE (MR/MS), BOTH FIRST NAME AND LAST NAME ARE IN UPPER CASE WITH 
-- CUSTOMER EMAIL ID, CUSTOMER CREATIONDATE AND DISPLAY CUSTOMER’S CATEGORY AFTER APPLYING BELOW CATEGORIZATION RULES:
	-- i.IF CUSTOMER CREATION DATE YEAR <2005 THEN CATEGORY A
    -- ii.IF CUSTOMER CREATION DATE YEAR >=2005 AND <2011 THEN CATEGORY B
    -- iii.IF CUSTOMER CREATION DATE YEAR>= 2011 THEN CATEGORY C
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER TABLE]

USE ORDERS;
SELECT
CASE 
WHEN CUSTOMER_GENDER = 'F'THEN concat('MS ',CUSTOMER_FNAME,CUSTOMER_LNAME) 
WHEN CUSTOMER_GENDER = 'M'THEN concat('MR ',CUSTOMER_FNAME,CUSTOMER_LNAME)
END as CUSTOMER_FULLNAME,
UPPER(CUSTOMER_FNAME) as 'CUSTOMER_FNAME',Upper(CUSTOMER_LNAME) AS 'CUSTOMER_LNAME', CUSTOMER_EMAIL,CUSTOMER_CREATION_DATE,
CASE 
WHEN year(CUSTOMER_CREATION_DATE) <2005 THEN 'CATEGORY_A'
WHEN year(CUSTOMER_CREATION_DATE) >=2005 AND year(CUSTOMER_CREATION_DATE) <2011 THEN 'CATEGORY_B'
WHEN year(CUSTOMER_CREATION_DATE) >= 2011 THEN 'CATEGORY_C'
END as CUSTOMER’S_CATEGORY 
  FROM ONLINE_CUSTOMER ;

-- 2. WRITE A QUERY TO DISPLAY THE FOLLOWING INFORMATION FOR THE PRODUCTS, WHICH HAVE NOT BEEN SOLD:  PRODUCT_ID, PRODUCT_DESC, 
-- PRODUCT_QUANTITY_AVAIL, PRODUCT_PRICE,INVENTORY VALUES(PRODUCT_QUANTITY_AVAIL*PRODUCT_PRICE), NEW_PRICE AFTER APPLYING DISCOUNT 
-- AS PER BELOW CRITERIA. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- i.IF PRODUCT PRICE > 20,000 THEN APPLY 20% DISCOUNT
    -- ii.IF PRODUCT PRICE > 10,000 THEN APPLY 15% DISCOUNT
    -- iii.IF PRODUCT PRICE =< 10,000 THEN APPLY 10% DISCOUNT
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -PRODUCT, ORDER_ITEMS TABLE] 
    

SELECT PRODUCT_ID, PRODUCT_DESC,PRODUCT_QUANTITY_AVAIL, PRODUCT_PRICE,(PRODUCT_QUANTITY_AVAIL*PRODUCT_PRICE) as INVENTORY_VALUES,
CASE 
WHEN PRODUCT_PRICE > 20000 THEN PRODUCT_PRICE*0.20
WHEN PRODUCT_PRICE > 10000 THEN PRODUCT_PRICE*0.15
WHEN PRODUCT_PRICE <= 10000 THEN PRODUCT_PRICE*0.1
END as NEW_PRICE
 FROM product order by INVENTORY_VALUES  desc;



-- 3. WRITE A QUERY TO DISPLAY PRODUCT_CLASS_CODE, PRODUCT_CLASS_DESCRIPTION, COUNT OF PRODUCT TYPE IN EACH PRODUCT CLASS, 
-- INVENTORY VALUE (P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE). INFORMATION SHOULD BE DISPLAYED FOR ONLY THOSE PRODUCT_CLASS_CODE 
-- WHICH HAVE MORE THAN 1,00,000 INVENTORY VALUE. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS]
SELECT pc.PRODUCT_CLASS_CODE,pc.PRODUCT_CLASS_DESC , count(pc.PRODUCT_CLASS_CODE) as PRODUCT_TYPE,
(p.PRODUCT_QUANTITY_AVAIL*p.PRODUCT_PRICE) as INVENTORY_VALUE
FROM PRODUCT p
LEFT JOIN PRODUCT_CLASS pc USING(PRODUCT_CLASS_CODE)
GROUP BY pc.PRODUCT_CLASS_CODE ,pc.PRODUCT_CLASS_DESC,INVENTORY_VALUE having INVENTORY_VALUE >=100000 
order by INVENTORY_VALUE desc;


-- 4. WRITE A QUERY TO DISPLAY CUSTOMER_ID, FULL NAME, CUSTOMER_EMAIL, CUSTOMER_PHONE AND COUNTRY OF CUSTOMERS WHO HAVE CANCELLED 
-- ALL THE ORDERS PLACED BY THEM(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]
USE ORDERS;
select oc.CUSTOMER_ID, concat(oc.CUSTOMER_FNAME,oc.CUSTOMER_LNAME) as 'FULL NAME',oc.CUSTOMER_EMAIL,oc.CUSTOMER_PHONE,ad.COUNTRY
from ONLINE_CUSTOMER oc 
JOIN address ad USING (ADDRESS_ID)
 WHERE oc.CUSTOMER_ID IN (
    SELECT CUSTOMER_ID 
    FROM order_header
    GROUP BY CUSTOMER_ID
    HAVING COUNT(*) = SUM(CASE WHEN order_status = 'Cancelled' THEN 1 ELSE 0 END)
);

-- 5. WRITE A QUERY TO DISPLAY SHIPPER NAME, CITY TO WHICH IT IS CATERING, NUMBER OF CUSTOMER CATERED BY THE SHIPPER IN THE CITY AND 
-- NUMBER OF CONSIGNMENTS DELIVERED TO THAT CITY FOR SHIPPER DHL(9 ROWS)
	-- [NOTE: TABLES TO BE USED -SHIPPER, ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]
    USE ORDERS;
SELECT SH.SHIPPER_NAME AS SHIPPER_NAME ,AD.CITY AS CITY_CATERED, COUNT(DISTINCT OC.CUSTOMER_ID) as NUMBER_OF_CUSTOMER_CATERED,
COUNT(OH.ORDER_ID) as NUMBER_OF_CONSIGNMENTS_DELIVERED
from SHIPPER SH 
JOIN ORDER_HEADER OH USING (SHIPPER_ID)
JOIN ONLINE_CUSTOMER OC USING (CUSTOMER_ID)
JOIN ADDRESS AD USING (ADDRESS_ID)
WHERE SHIPPER_NAME='DHL'
GROUP BY SH.SHIPPER_NAME,AD.CITY;

-- 6. WRITE A QUERY TO DISPLAY CUSTOMER ID, CUSTOMER FULL NAME, TOTAL QUANTITY AND TOTAL VALUE (QUANTITY*PRICE) SHIPPED WHERE MODE 
-- OF PAYMENT IS CASH AND CUSTOMER LAST NAME STARTS WITH 'G'
	-- [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER, ORDER_ITEMS, PRODUCT, ORDER_HEADER]
USE ORDERS;
SELECT OC.CUSTOMER_ID,concat(OC.CUSTOMER_FNAME,OC.CUSTOMER_LNAME) AS 'CUSTOMER FULL NAME',
SUM(P.PRODUCT_QUANTITY_AVAIL) AS 'TOTAL QUANTITY', (P.PRODUCT_PRICE * P.PRODUCT_QUANTITY_AVAIL) AS 'TOTAL VALUE'
FROM ONLINE_CUSTOMER OC
JOIN ORDER_HEADER OH USING(CUSTOMER_ID)
JOIN ORDER_ITEMS USING(ORDER_ID)
JOIN PRODUCT P USING(PRODUCT_ID)
WHERE OH.PAYMENT_MODE ='Cash' and OC.CUSTOMER_LNAME LIKE 'G%'
GROUP BY OC.CUSTOMER_ID,P.PRODUCT_PRICE,P.PRODUCT_QUANTITY_AVAIL;
    
-- 7. WRITE A QUERY TO DISPLAY ORDER_ID AND VOLUME OF BIGGEST ORDER (IN TERMS OF VOLUME) THAT CAN FIT IN CARTON ID 10  
	-- [NOTE: TABLES TO BE USED -CARTON, ORDER_ITEMS, PRODUCT]
 USE ORDERS;
SELECT OI.ORDER_ID,(P.LEN*P.WIDTH*P.HEIGHT) AS 'VOLUME OF PRODUCT'
FROM ORDER_ITEMS OI 
JOIN PRODUCT P USING (PRODUCT_ID) 
JOIN CARTON C ON C.LEN>=P.LEN AND C.WIDTH >=P.WIDTH AND C.HEIGHT>=P.HEIGHT
WHERE C.CARTON_ID=10
ORDER BY 'VOLUME OF PRODUCT' DESC LIMIT 1;

-- 8. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC, PRODUCT_QUANTITY_AVAIL, QUANTITY SOLD, AND SHOW INVENTORY STATUS OF 
-- PRODUCTS AS BELOW AS PER BELOW CONDITION:
	-- A.FOR ELECTRONICS AND COMPUTER CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY',
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 10% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY', 
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 50% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 50% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- B.FOR MOBILES AND WATCHES CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 20% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 60% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 60% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- C.REST OF THE CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 30% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 70% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv. IF INVENTORY QUANTITY IS MORE OR EQUAL TO 70% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
        
			-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS, ORDER_ITEMS] (USE SUB-QUERY)
USE ORDERS;
SELECT P.PRODUCT_ID,P.PRODUCT_DESC,P.PRODUCT_QUANTITY_AVAIL,COALESCE(SUM(OI.PRODUCT_QUANTITY), 0) AS 'QUANTITY SOLD',
(P.PRODUCT_QUANTITY_AVAIL - COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) AS 'INVENTORY QUANTITY',
CASE 
WHEN PC.PRODUCT_CLASS_DESC  IN ('ELECTRONICS', 'COMPUTER') THEN 
     CASE WHEN COALESCE(SUM(OI.PRODUCT_QUANTITY), 0) = 0  THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
          WHEN (P.PRODUCT_QUANTITY_AVAIL - COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) < (0.1 * COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
          WHEN (P.PRODUCT_QUANTITY_AVAIL - COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) < (0.5 * COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
          WHEN (P.PRODUCT_QUANTITY_AVAIL - COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) >= (0.5 * COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) THEN 'SUFFICIENT INVENTORY'
	 END 
WHEN PC.PRODUCT_CLASS_DESC IN ('MOBILES', 'WATCHES') THEN 
	 CASE WHEN COALESCE(SUM(OI.PRODUCT_QUANTITY), 0) = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
             WHEN (P.PRODUCT_QUANTITY_AVAIL - COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) < (0.2 * COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
             WHEN (P.PRODUCT_QUANTITY_AVAIL - COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) < (0.6 * COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
			 WHEN (P.PRODUCT_QUANTITY_AVAIL - COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) >= (0.6 * COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) THEN 'SUFFICIENT INVENTORY'
	 END
WHEN PC.PRODUCT_CLASS_DESC NOT IN ('ELECTRONICS', 'COMPUTER', 'MOBILES', 'WATCHES') THEN
          CASE WHEN COALESCE(SUM(OI.PRODUCT_QUANTITY), 0) = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
             WHEN (P.PRODUCT_QUANTITY_AVAIL - COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) < (0.3 * COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
             WHEN (P.PRODUCT_QUANTITY_AVAIL - COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) < (0.7 * COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
			 WHEN (P.PRODUCT_QUANTITY_AVAIL - COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) >= (0.7 * COALESCE(SUM(OI.PRODUCT_QUANTITY), 0)) THEN 'SUFFICIENT INVENTORY'
	END
END AS 'INVENTORY STATUS'
FROM ORDER_ITEMS OI 
JOIN PRODUCT P USING (PRODUCT_ID)
JOIN PRODUCT_CLASS PC USING(PRODUCT_CLASS_CODE)
GROUP BY P.PRODUCT_ID,OI.PRODUCT_QUANTITY,P.PRODUCT_DESC, P.PRODUCT_QUANTITY_AVAIL, PC.PRODUCT_CLASS_DESC;




-- 9. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC AND TOTAL QUANTITY OF PRODUCTS WHICH ARE SOLD TOGETHER WITH PRODUCT ID 201 
-- AND ARE NOT SHIPPED TO CITY BANGALORE AND NEW DELHI. DISPLAY THE OUTPUT IN DESCENDING ORDER WITH RESPECT TO TOT_QTY.(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED -ORDER_ITEMS,PRODUCT,ORDER_HEADER, ONLINE_CUSTOMER, ADDRESS]
USE ORDERS; 
SELECT P.PRODUCT_ID,P.PRODUCT_DESC,sum(OI.PRODUCT_QUANTITY) AS 'TOTAL QUANTITY', AD.CITY
FROM PRODUCT P
JOIN ORDER_ITEMS OI USING (PRODUCT_ID)
JOIN ORDER_HEADER OH USING (ORDER_ID)
JOIN ONLINE_CUSTOMER OC USING(CUSTOMER_ID)
JOIN ADDRESS AD USING (ADDRESS_ID)
WHERE OI.ORDER_ID IN (SELECT ORDER_ID FROM ORDER_ITEMS WHERE PRODUCT_ID=201) AND AD.CITY NOT IN ('BANGALORE','NEW DELHI')
AND OI.PRODUCT_ID=201
GROUP BY AD.CITY
order by 'TOTAL QUANTITY' DESC;

-- 10. WRITE A QUERY TO DISPLAY THE ORDER_ID,CUSTOMER_ID AND CUSTOMER FULLNAME AND TOTAL QUANTITY OF PRODUCTS SHIPPED FOR ORDER IDS 
-- WHICH ARE EVEN AND SHIPPED TO ADDRESS WHERE PINCODE IS NOT STARTING WITH "5" 
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER,ORDER_HEADER, ORDER_ITEMS, ADDRESS]
USE ORDERS; 
SELECT OI.ORDER_ID,OC.CUSTOMER_ID,CONCAT(OC.CUSTOMER_FNAME,' ',OC.CUSTOMER_LNAME)AS 'CUSTOMER FULLNAME',
SUM(OI.PRODUCT_QUANTITY) AS 'TOTAL QUANTITY', AD.PINCODE
FROM ADDRESS AD
JOIN ONLINE_CUSTOMER OC USING(ADDRESS_ID)
JOIN ORDER_HEADER OH USING(CUSTOMER_ID)
JOIN ORDER_ITEMS OI USING(ORDER_ID)
WHERE OH.ORDER_STATUS='Shipped' AND (OH.ORDER_ID%2=0) AND (AD.PINCODE NOT LIKE '5%')
GROUP BY  OI.ORDER_ID;
